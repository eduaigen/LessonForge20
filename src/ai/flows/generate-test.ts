
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Test generation flow for creating tests based on unit and topic.
 *
 * - generateTest - A function that generates a test based on user-selected curriculum.
 * - GenerateTestInput - The input type for the generateTest function.
 * - GenerateTestOutput - The return type for the generateTest function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { aiContentGenerationRules } from '../schemas/formatting-rules';

const GenerateTestInputSchema = z.object({
  unit: z.string().describe('The unit or comma-separated list of units for which to generate the test.'),
  topic: z.string().describe('The topic for which to generate the test. If multiple units are selected, this may be "All Topics".'),
  subject: z.string().describe('The subject of the test.'),
  instructions: z.string().optional().describe('Additional instructions for generating the test.'),
  numMultipleChoice: z.number().optional().describe('Number of multiple-choice questions.'),
  numShortAnswer: z.number().optional().describe('Number of short-answer questions.'),
  numConstructedResponse: z.number().optional().describe('Number of constructed-response questions.'),
  numEssay: z.number().optional().describe('Number of essay questions.'),
});
export type GenerateTestInput = z.infer<typeof GenerateTestInputSchema>;

const GenerateTestOutputSchema = z.object({
  test: z.string().describe('The generated test content, including a student version and an answer key, formatted according to the rules.'),
});
export type GenerateTestOutput = z.infer<typeof GenerateTestOutputSchema>;

export async function generateTest(input: GenerateTestInput): Promise<GenerateTestOutput> {
  return generateTestFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateTestPrompt',
  input: {schema: GenerateTestInputSchema},
  output: {schema: GenerateTestOutputSchema},
  prompt: `You are an expert educator and exam creator specializing in New York State Regents Examinations and NGSS-aligned assessments. Your task is to generate a complete, print-ready test based on the provided curriculum details. You must adhere to the following rules with 100% fidelity.

**Rule Set 1: Core Principles for Question Selection**
- **Authentic Source Material**: You must act as if you are accessing and drawing questions from a comprehensive bank of previously released New York State Regents Examination questions and NGSS-aligned item banks. This ensures authenticity in style, difficulty, and standards alignment.
- **Subject-Specific Adaptation**: Apply the distinct rules for each subject as detailed in Rule Set 2.
- **Standard Alignment**: Ensure all questions are aligned to the relevant standards for the subject (NYS LS or NGSS).

**Rule Set 2: Subject-Specific Question Generation & Formatting**
- **ELA**: Questions must be linked to fully provided reading passages embedded in the test. Focus on text-dependent analysis, literary analysis, and vocabulary in context.
- **Mathematics (Algebra I, Geometry, Algebra II)**: Formulas and equations must be in LaTeX format (e.g., $ax^2 + bx + c = 0$). Questions must include interpretation of graphs and diagrams. Constructed responses must require showing work.
- **Science (Living Environment, Earth Science, Chemistry, Physics)**: Emphasize questions that integrate fully rendered, labeled SVG diagrams, models, and data tables. Include lab scenarios and questions requiring the use of Regents Reference Tables (indicate when needed). For science subjects, you MUST use the NGSS Retest Cluster Format from Rule Set 3.
- **Social Studies (Global History, US History)**: A core component is the Document-Based Question (DBQ). You must construct sets of related historical documents (text, images, charts) and accompanying analytical questions. All documents must be fully embedded.

**Rule Set 3: NGSS Retest Cluster Format (Mandatory for Science Subjects)**
- **Phenomenon-Based Introduction**: Each test must begin with an engaging, observable phenomenon presented as a comprehensive stimulus (reading passage, diagram, graph, data table, or combination).
- **Question Clustering**: All questions must be grouped in a cluster directly related to the central phenomenon. They must be logically interconnected.
- **Multi-Dimensionality**: Questions must assess all three NGSS dimensions (DCIs, SEPs, CCCs). They should prompt students to use models, analyze data, construct explanations, and identify patterns or cause/effect related to the phenomenon.
- **Variety of Formats**: The test must contain a mix of multiple-choice, short-response, and constructed-response questions.
- **Novelty & Evidence**: The phenomenon should be novel, requiring application of knowledge. Questions must prompt students to use evidence from the stimulus.

**Rule Set 4: Output Rendering & Display (Print-Ready)**
- **Structure**: Your entire output must be a single block of text. It must contain two main sections, clearly marked: 'STUDENT VERSION START ---' and 'ANSWER KEY START ---'.
- **Formatting**: Use clear section headers (e.g., 'WORKSHEET SECTION A: Multiple Choice').
- **No Clutter**: Do not include any conversational text, notes, or apologies. The output must be only the test content.
- **Visual Clarity**: All visuals (diagrams, graphs) MUST be rendered as complete, well-formed SVG code blocks. All tables must use pipe-and-dash Markdown format. This is non-negotiable.
- **Mathematical Notation**: All mathematical symbols, variables, and formulas must be enclosed in LaTeX delimiters ($...$ for inline, $$...$$ for display).
${aiContentGenerationRules}


**Generation Task:**
Generate a test based on the following user request. The final design must meet the original design of a Regents assessment for the specified subject.

- **Subject:** {{{subject}}}
- **Unit(s):** {{{unit}}}
- **Topic:** {{{topic}}}

**Test Composition:**
{{#if numMultipleChoice}}- Multiple Choice Questions: {{numMultipleChoice}}{{/if}}
{{#if numShortAnswer}}- Short Answer Questions: {{numShortAnswer}}{{/if}}
{{#if numConstructedResponse}}- Constructed Response Questions: {{numConstructedResponse}}{{/if}}
{{#if numEssay}}- Essay Questions: {{numEssay}}{{/if}}

{{#if instructions}}- **Additional Instructions:** {{{instructions}}}{{/if}}

Generate the test now.
`, 
});

const generateTestFlow = ai.defineFlow(
  {
    name: 'generateTestFlow',
    inputSchema: GenerateTestInputSchema,
    outputSchema: GenerateTestOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);

    