
'use client';

import React, { useRef } from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Printer, Download } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { ScrollArea } from '../ui/scroll-area';
import type { GeneratedContent } from '../generators/NVBiologyGenerator';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

type CollapsibleSectionProps = {
  title: string;
  children: React.ReactNode;
  contentItem: GeneratedContent; 
};

const CollapsibleSection = React.forwardRef<HTMLDivElement, CollapsibleSectionProps>(
    ({ title, children, contentItem }, ref) => {
    const { toast } = useToast();
    const contentRef = useRef<HTMLDivElement>(null);

    // This exposes the inner contentRef to the parent component through the forwarded ref.
    React.useImperativeHandle(ref, () => contentRef.current as HTMLDivElement);

    const handlePrint = () => {
        const printableContent = contentRef.current;
        if (printableContent) {
            const printWindow = window.open('', '', 'height=800,width=1000');
            if (printWindow) {
                const headerHtml = `
                    <div style="padding-bottom: 20px; border-bottom: 1px solid #ccc; margin-bottom: 20px; text-align: center;">
                        <h2 style="font-family: sans-serif; color: #333;">Created by EduAiGen</h2>
                    </div>
                `;
                const footerHtml = `
                    <div style="padding-top: 20px; border-top: 1px solid #ccc; margin-top: 20px; text-align: center; font-size: 10px; font-family: sans-serif; color: #666;">
                        <p>Â© ${new Date().getFullYear()} EduAiGen. All Rights Reserved.</p>
                        <p>
                            Disclaimer: All lesson plans, tests, lab activities, and other materials generated by EduAiGen are the intellectual property of EduAiGen. These materials are provided for educational, non-commercial use only. They may not be sold, redistributed, or used for any commercial purposes without explicit written permission from EduAiGen.
                        </p>
                    </div>
                `;

                printWindow.document.write('<html><head><title>EduAiGen Document</title>');
                const styles = Array.from(document.styleSheets)
                    .map(styleSheet => {
                        try {
                            if (styleSheet.href) {
                                return `<link rel="stylesheet" href="${styleSheet.href}">`;
                            }
                            return `<style>${Array.from(styleSheet.cssRules).map(rule => rule.cssText).join('')}</style>`;
                        } catch (e) {
                            if (styleSheet.href) {
                                return `<link rel="stylesheet" href="${styleSheet.href}">`;
                            }
                            return '';
                        }
                    })
                    .join('\n');

                printWindow.document.write(styles);
                printWindow.document.write(`
                  <style>
                    @page {
                      size: auto;
                      margin: 0;
                    }
                    @media print { 
                      body { 
                        -webkit-print-color-adjust: exact; 
                        padding-top: 1rem;
                        padding-bottom: 1rem;
                      } 
                      .document-view h2, .document-view h3, .document-view h4 { 
                        color: #333 !important; 
                      } 
                    }
                  </style>
                `);
                printWindow.document.write('</head><body style="padding: 2rem;">');
                printWindow.document.write(headerHtml);
                printWindow.document.write(printableContent.innerHTML);
                printWindow.document.write(footerHtml);
                printWindow.document.write('</body></html>');
                printWindow.document.close();
                setTimeout(() => {
                    printWindow.print();
                    printWindow.close();
                }, 250); 
            }
        }
    };

    const handleDownload = async () => {
        const input = contentRef.current;
        if (input) {
          toast({
            title: 'Generating PDF...',
            description: 'Please wait while we create your document.',
          });
          try {
            const canvas = await html2canvas(input, {
              scale: 2, // Higher scale for better quality
              useCORS: true,
            });
            const imgData = canvas.toDataURL('image/png');
            const pdf = new jsPDF('p', 'mm', 'a4');
            const pdfWidth = pdf.internal.pageSize.getWidth();
            const pdfHeight = pdf.internal.pageSize.getHeight();
            const imgWidth = canvas.width;
            const imgHeight = canvas.height;
            const ratio = imgWidth / imgHeight;
            const docWidth = pdfWidth - 20; // with margin
            let docHeight = docWidth / ratio;
            let heightLeft = imgHeight * (docWidth / imgWidth);
            let position = 10; // top margin
    
            pdf.addImage(imgData, 'PNG', 10, position, docWidth, docHeight);
            heightLeft -= (pdfHeight - 20);
    
            while (heightLeft > 0) {
              position = - (imgHeight * (docWidth / imgWidth) - heightLeft) + 10;
              pdf.addPage();
              pdf.addImage(imgData, 'PNG', 10, position, docWidth, docHeight);
              heightLeft -= (pdfHeight - 20);
            }
    
            pdf.save(`${title.replace(/ /g, '_')}.pdf`);
          } catch (error) {
            console.error('Error generating PDF:', error);
            toast({
              title: 'PDF Generation Failed',
              description: 'Could not generate the PDF file. Please try again.',
              variant: 'destructive',
            });
          }
        }
      };


  return (
    <Card className="mt-6 shadow-md">
      <Accordion type="single" collapsible defaultValue="item-1">
        <AccordionItem value="item-1" className="border-b-0">
            <CardHeader className="flex flex-row items-center justify-between p-4 flex-wrap gap-4">
                <AccordionTrigger className="flex-1 text-left hover:no-underline p-0">
                    <h3 className="text-xl font-headline">{title}</h3>
                </AccordionTrigger>
                <div className="flex items-center gap-2 ml-4 flex-wrap">
                    <Button variant="outline" size="icon" onClick={handlePrint} title="Print">
                        <Printer className="h-4 w-4" />
                        <span className="sr-only">Print</span>
                    </Button>
                    <Button variant="outline" size="icon" onClick={handleDownload} title="Download as PDF">
                        <Download className="h-4 w-4" />
                        <span className="sr-only">Download</span>
                    </Button>
                </div>
            </CardHeader>
            <AccordionContent>
                <CardContent className="p-0">
                    <ScrollArea className="max-h-[800px] overflow-y-auto">
                        <div ref={contentRef} className="p-4">{children}</div>
                    </ScrollArea>
                </CardContent>
            </AccordionContent>
        </AccordionItem>
      </Accordion>
    </Card>
  );
});

CollapsibleSection.displayName = 'CollapsibleSection';

export default CollapsibleSection;
