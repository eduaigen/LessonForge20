
'use client';

import React, { useRef, useState } from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Printer, Download, FileDown, Loader2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { ScrollArea } from '../ui/scroll-area';
import type { GeneratedContent } from '../generators/NVBiologyGenerator';
import jsPDF from 'jspdf';
import StyledContentDisplay from './StyledContentDisplay';

type CollapsibleSectionProps = {
  title: string;
  children: React.ReactNode;
  contentItem: GeneratedContent;
};

export default function CollapsibleSection({ title, children, contentItem }: CollapsibleSectionProps) {
    const { toast } = useToast();
    const printableContentRef = useRef<HTMLDivElement>(null);
    const [isDownloading, setIsDownloading] = useState(false);

    const getPrintableHTML = (element: HTMLElement) => {
        const headerHtml = `
            <div style="padding-bottom: 20px; border-bottom: 1px solid #ccc; margin-bottom: 20px; text-align: center;">
                <h2 style="font-family: sans-serif; color: #333;">${title} - Created by EduAiGen</h2>
            </div>
            <div style="margin-bottom: 20px;">
                <table style="width: 100%; border-collapse: collapse; font-family: sans-serif;">
                    <tr>
                        <td style="width: 60%; padding-bottom: 10px;"><strong>Name:</strong> ____________________________</td>
                        <td style="width: 40%; padding-bottom: 10px;"><strong>Date:</strong> _________________</td>
                    </tr>
                     <tr>
                        <td style="width: 60%; padding-bottom: 10px;"><strong>Class:</strong> _____________________________</td>
                        <td style="width: 40%; padding-bottom: 10px;"><strong>Period:</strong> _________</td>
                    </tr>
                </table>
            </div>
        `;
        const footerHtml = `
            <div style="padding-top: 20px; border-top: 1px solid #ccc; margin-top: 20px; text-align: center; font-size: 10px; font-family: sans-serif; color: #666;">
                <p>Â© ${new Date().getFullYear()} EduAiGen. All Rights Reserved.</p>
                <p>
                    Disclaimer: All lesson plans, tests, lab activities, and other materials generated by EduAiGen are the intellectual property of EduAiGen. These materials are provided for educational, non-commercial use only. They may not be sold, redistributed, or used for any commercial purposes without explicit written permission from EduAiGen.
                </p>
            </div>
        `;
        return `<html><head><style>
          body { font-family: 'Times New Roman', serif; }
          table, th, td { border: 1px solid black; border-collapse: collapse; padding: 5px; }
          th { font-weight: bold; }
          h1,h2,h3,h4,h5,h6 { font-weight: bold; }
          blockquote { border-left: 2px solid #ccc; padding-left: 10px; margin-left: 0; font-style: italic; }
        </style></head><body>${headerHtml}${element.innerHTML}${footerHtml}</body></html>`;
    }

    const handlePrint = () => {
        const printableContent = printableContentRef.current;
        if (printableContent) {
            const printWindow = window.open('', '', 'height=800,width=1000');
            if (printWindow) {
                printWindow.document.write('<html><head><title>EduAiGen Document</title>');
                const styles = Array.from(document.styleSheets)
                    .map(styleSheet => {
                        try {
                            if (styleSheet.href) {
                                return `<link rel="stylesheet" href="${styleSheet.href}">`;
                            }
                            return `<style>${Array.from(styleSheet.cssRules).map(rule => rule.cssText).join('')}</style>`;
                        } catch (e) {
                            if (styleSheet.href) {
                                return `<link rel="stylesheet" href="${styleSheet.href}">`;
                            }
                            return '';
                        }
                    })
                    .join('\n');

                printWindow.document.write(styles);
                printWindow.document.write(`
                  <style>
                    @page {
                      size: auto;
                      margin: 2rem;
                    }
                    body { 
                      -webkit-print-color-adjust: exact; 
                      padding: 2rem;
                    } 
                    .document-view h2, .document-view h3, .document-view h4 { 
                      color: #333 !important; 
                    }
                  </style>
                `);
                printWindow.document.write(getPrintableHTML(printableContent));
                printWindow.document.write('</body></html>');
                printWindow.document.close();
                setTimeout(() => {
                    printWindow.print();
                    printWindow.close();
                }, 250); 
            }
        }
    };

    const handleDownloadDoc = () => {
        const content = printableContentRef.current;
        if (!content) return;

        toast({
            title: 'Generating .doc file...',
            description: 'Please wait while we prepare your document.',
        });

        const htmlContent = getPrintableHTML(content);

        const blob = new Blob([htmlContent], {
            type: 'application/msword'
        });

        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `${title.replace(/ /g, '_')}.doc`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    };

    const handleDownloadPdf = async () => {
        const contentElement = printableContentRef.current;
        if (!contentElement) {
          toast({ title: 'Error', description: 'Content to print not found.', variant: 'destructive' });
          return;
        }
    
        setIsDownloading(true);
        toast({ title: 'Generating PDF...', description: 'Please wait, this may take a moment.' });
    
        try {
            const pdf = new jsPDF('p', 'pt', 'a4');
    
            await pdf.html(getPrintableHTML(contentElement), {
                callback: function (doc) {
                    doc.save(`${title.replace(/ /g, '_')}.pdf`);
                    toast({ title: 'Success', description: 'PDF has been downloaded.' });
                },
                x: 10,
                y: 10,
                html2canvas: {
                    scale: 0.75
                },
                autoPaging: 'text',
            });
    
        } catch (error) {
          console.error('PDF Generation Error:', error);
          toast({
            title: 'PDF Generation Failed',
            description: 'An unexpected error occurred. Please try again.',
            variant: 'destructive',
          });
        } finally {
          setIsDownloading(false);
        }
      };
      
  return (
    <Card className="mt-6 shadow-md">
      <div style={{ display: 'none' }}>
        <div ref={printableContentRef} id={`printable-content-${contentItem.id}`} className="p-4 bg-white text-black">
             <StyledContentDisplay content={contentItem.content} type={contentItem.type} />
        </div>
      </div>
      <Accordion type="single" collapsible defaultValue="item-1">
        <AccordionItem value="item-1" className="border-b-0">
            <CardHeader className="flex flex-row items-center justify-between p-4 flex-wrap gap-4">
                <AccordionTrigger className="flex-1 text-left hover:no-underline p-0">
                    <h3 className="text-xl font-headline">{title}</h3>
                </AccordionTrigger>
                <div className="flex items-center gap-2 ml-4 flex-wrap">
                    <Button variant="outline" size="icon" onClick={handlePrint} title="Print">
                        <Printer className="h-4 w-4" />
                        <span className="sr-only">Print</span>
                    </Button>
                    <Button variant="outline" size="icon" onClick={handleDownloadPdf} disabled={isDownloading} title="Download as PDF">
                        {isDownloading ? <Loader2 className="h-4 w-4 animate-spin" /> : <Download className="h-4 w-4" />}
                        <span className="sr-only">Download as PDF</span>
                    </Button>
                    <Button variant="outline" size="icon" onClick={handleDownloadDoc} title="Download as .doc">
                        <FileDown className="h-4 w-4" />
                        <span className="sr-only">Download as .doc</span>
                    </Button>
                </div>
            </CardHeader>
            <AccordionContent>
                <CardContent className="p-0">
                    <ScrollArea className="max-h-[800px] overflow-y-auto">
                        <div id={`content-${contentItem.id}`} className="p-4">{children}</div>
                    </ScrollArea>
                </CardContent>
            </AccordionContent>
        </AccordionItem>
      </Accordion>
    </Card>
  );
}
